name: PR CI - CanPRDev Project Review # Workflow name, changed for Python projects | PR CI - CanPRDev 專案審查

on:
  pull_request:
    branches:
      - main # Trigger condition: Pull Request to the main branch | 觸發條件：在 main 分支的 Pull Request

# Environment variables configuration | 環境變數設定
env:
  PYTHON_VERSION: '3.9'
  MAX_DIFF_SIZE: 6000
  OPENAI_MODEL: 'gpt-4o'
  REVIEW_TITLE: '🤖 **AI Code Review Feedback** | AI 程式碼審查意見'

# Explicitly set permissions | 明確設定權限
permissions:
  contents: read
  pull-requests: write

jobs:
  build-and-test:
    name: Build and Test # Job name | 作業名稱
    runs-on: ubuntu-latest # Execution environment | 執行環境

    steps:
      - name: Checkout code # Step: Checkout code | 步驟：檢出程式碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get the complete git history for better diff comparison | 獲取完整的 git 歷史記錄，以便進行更好的差異比較

      - name: Set up Python # Step: Set up Python environment | 步驟：設定 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }} # Use environment variable for Python version | 使用環境變數設定 Python 版本

      - name: Cache pip dependencies # Step: Cache pip dependencies | 步驟：快取 pip 依賴
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies # Step: Install Python dependencies | 步驟：安裝 Python 依賴
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt # Install project dependencies | 安裝專案依賴
          else
            echo "No requirements.txt found, skipping dependency installation"
          fi
          # Install necessary tools | 安裝必要的工具
          pip install jq

      - name: Notify Review Start # Step: Notify review start | 步驟：通知審查開始
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🔍 AI code review process started. Please wait while I analyze your code...
            🔍 AI 程式碼審查流程已啟動。請稍候，我正在分析您的程式碼...

      - name: Get PR Diff and Determine Size # Step: Get PR diff and determine size | 步驟：獲取 PR 差異並確定大小
        id: diff
        run: |
          echo "Getting diff for PR #${{ github.event.pull_request.number }}"
          git fetch origin main # Fetch the latest state of the main branch | 獲取主分支的最新狀態
          git diff origin/main > diff.txt # Write the diff to diff.txt file | 將差異寫入 diff.txt 檔案
          
          # Determine PR size | 確定 PR 大小
          DIFF_SIZE=$(cat diff.txt | wc -c)
          echo "diff_size=$DIFF_SIZE" >> $GITHUB_OUTPUT
          if [ $DIFF_SIZE -gt ${{ env.MAX_DIFF_SIZE }} ]; then
            echo "is_large=true" >> $GITHUB_OUTPUT
            echo "PR is large ($DIFF_SIZE bytes), will analyze most important parts only"
          else
            echo "is_large=false" >> $GITHUB_OUTPUT
            echo "PR is manageable size ($DIFF_SIZE bytes), will analyze completely"
          fi

      - name: Process Large PR # Step: Process large PR | 步驟：處理大型 PR
        if: steps.diff.outputs.is_large == 'true'
        run: |
          echo "PR is too large for complete analysis. Analyzing most important files only..."
          # Find most important files (e.g., Python files, excluding test files) | 尋找最重要的檔案（例如 Python 檔案，排除測試檔案）
          git diff --name-only origin/main | grep -E '\.py$' | grep -v '_test\.py$' | grep -v 'test_' | head -10 > important_files.txt
          
          # Extract diff only for important files | 只提取重要檔案的差異
          > filtered_diff.txt
          while IFS= read -r file; do
            echo "Including $file in analysis"
            git diff origin/main -- "$file" >> filtered_diff.txt
          done < important_files.txt
          
          # Replace original diff with filtered diff | 使用過濾後的差異替換原始差異
          mv filtered_diff.txt diff.txt

      # Optional SonarQube scan | 可選的 SonarQube 掃描
      - name: SonarQube Scan
        if: ${{ vars.USE_SONARQUBE == 'true' }}
        id: sonarqube-scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONARQUBE_URL }}
        continue-on-error: true

      - name: Call OpenAI for Review # Step: Call OpenAI for Review | 步驟：呼叫 OpenAI 進行審查
        id: openai_review
        continue-on-error: true # Allow this step to fail but continue the workflow | 允許此步驟失敗但繼續工作流程
        run: |
          echo "Calling OpenAI API to analyze code diff..."
          # Limit DIFF_CONTENT size to avoid exceeding OpenAI API Token limits.
          # Note: Using head -c ${{ env.MAX_DIFF_SIZE }} to limit bytes, ensuring the diff file isn't too large.
          # 限制 DIFF_CONTENT 的大小，以避免超過 OpenAI API 的 Token 限制
          # 注意：這裡使用 head -c ${{ env.MAX_DIFF_SIZE }} 限制字節數，確保 diff 檔案不會太大
          DIFF_CONTENT=$(cat diff.txt | head -c ${{ env.MAX_DIFF_SIZE }} | jq -Rs .)

          # Construct the JSON request data for the OpenAI API | 構建傳送給 OpenAI API 的 JSON 請求資料
          REQUEST_DATA=$(jq -n \
            --arg model "${{ env.OPENAI_MODEL }}" \
            --arg system_msg "You are a senior code reviewer specializing in identifying technical debt, refactoring suggestions, clean code, and SOLID principles. Please pay special attention to Python code conventions and best practices. | 你是一位資深程式碼審查員，專長在於找出技術債、重構建議與 clean code 和 SOLID 原則。請特別注意 Python 程式碼的慣例和最佳實踐。" \
            --arg user_msg "The following is the code diff for a pull request. Please identify any technical debt, code smells, maintenance risks, security issues, and provide refactoring suggestions:\n\n$(cat diff.txt | head -c ${{ env.MAX_DIFF_SIZE }})" \
            '{
              model: $model,
              temperature: 0.7,
              messages: [
                { role: "system", content: $system_msg },
                { role: "user", content: $user_msg }
              ]
            }')

          echo "🟡 Sending this request to OpenAI:"
          echo "$REQUEST_DATA" | jq . # Display the request data sent (prettified output) | 顯示傳送的請求資料（美化輸出）

          # Call OpenAI API using curl | 使用 curl 呼叫 OpenAI API
          RESPONSE=$(curl https://api.rdsec.trendmicro.com/prod/aiendpoint/v1/chat/completions \
            -s \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "extra-parameters: pass-through" \
            -d "$REQUEST_DATA")
          
          # Check if API call was successful | 檢查 API 呼叫是否成功
          if [ $? -ne 0 ] || [ -z "$RESPONSE" ] || [[ "$RESPONSE" == *"error"* ]]; then
            echo "api_error=true" >> $GITHUB_OUTPUT
            echo "Error calling OpenAI API or receiving response" > review.txt
            echo "$RESPONSE" >> api_error.log
          else
            echo "api_error=false" >> $GITHUB_OUTPUT
            echo "🟢 OpenAI Response Content: | OpenAI 回應內容："
            echo "$RESPONSE" | jq . # Display OpenAI's response (prettified output) | 顯示 OpenAI 的回應（美化輸出）

            # Extract review content from the response and write to review.txt | 從回應中提取審查內容並寫入 review.txt
            echo "$RESPONSE" | jq -r '.choices[0].message.content' > review.txt
          fi

          # Process newlines for correct display in GitHub comments | 處理換行符，以便在 GitHub 評論中正確顯示
          REVIEW_CONTENT=$(cat review.txt | perl -pe 's/\\n/\n/g')
          # Set the review content as the step's output | 將審查內容設定為步驟的輸出
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR # Step: Comment on PR | 步驟：在 PR 上評論
        uses: peter-evans/create-or-update-comment@v3 # Use a third-party Action to create or update a comment | 使用第三方 Action 建立或更新評論
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use the GitHub-provided Token for authentication | 使用 GitHub 提供的 Token 進行身份驗證
          issue-number: ${{ github.event.pull_request.number }} # PR number for the comment | 評論的 PR 編號
          body: | # Comment body | 評論內容
            ${{ env.REVIEW_TITLE }}

            ${{ steps.diff.outputs.is_large == 'true' && '⚠️ **Note**: This PR is large, so only the most important files were analyzed. | ⚠️ **注意**：此 PR 過大，僅分析了最重要的檔案。' || '' }}
            ${{ steps.openai_review.outputs.api_error == 'true' && '❌ **Error**: There was an issue with the OpenAI API call. Please check the workflow logs. | ❌ **錯誤**：呼叫 OpenAI API 時發生問題。請檢查工作流程日誌。' || '' }}
            
            Here are the analysis and suggestions from OpenAI ${{ env.OPENAI_MODEL }} for this PR:
            以下是 OpenAI ${{ env.OPENAI_MODEL }} 對此 PR 的分析與建議：

            ${{ steps.openai_review.outputs.review }} # Reference the output from the OpenAI review step | 引用 OpenAI 審查步驟的輸出
            
            ${{ steps.sonarqube-scan.outcome == 'success' && '✅ **SonarQube scan completed successfully** | ✅ **SonarQube 掃描成功完成**' || '' }}

      - name: Run Python tests # Step: Run Python tests | 步驟：執行 Python 測試
        id: tests
        continue-on-error: true # Allow tests to fail but continue the workflow | 允許測試失敗但繼續工作流程
        run: |
          echo "Running Python tests..."
          # Check if pytest.ini or test directory exists | 檢查是否有 pytest.ini 或 test 目錄
          if [ -f "pytest.ini" ] || [ -d "tests" ] || [ -d "test" ]; then
            pip install pytest pytest-cov
            pytest --cov=./ --cov-report=xml || echo "test_failed=true" >> $GITHUB_OUTPUT
            echo "test_status=$?" >> $GITHUB_OUTPUT
          else
            echo "No pytest configuration or test directory found, skipping tests"
            echo "test_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Report Test Results # Step: Report test results | 步驟：報告測試結果
        if: steps.tests.outputs.test_status != 'skipped'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🧪 Test Results | 🧪 測試結果
            
            ${{ steps.tests.outputs.test_failed == 'true' && '❌ **Tests failed**. Please check the workflow logs for details. | ❌ **測試失敗**。請檢查工作流程日誌以獲取詳細資訊。' || '✅ **Tests passed successfully**. | ✅ **測試成功通過**。' }}

      - name: Workflow Summary # Step: Workflow summary | 步驟：工作流程摘要
        run: |
          echo "## 🔍 PR Review Summary | PR 審查摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Diff size: ${{ steps.diff.outputs.diff_size }} bytes" >> $GITHUB_STEP_SUMMARY
          echo "- OpenAI model used: ${{ env.OPENAI_MODEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- API error: ${{ steps.openai_review.outputs.api_error || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test status: ${{ steps.tests.outputs.test_status || 'not run' }}" >> $GITHUB_STEP_SUMMARY
